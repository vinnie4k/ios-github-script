//
//  A1Tests.swift
//  A1Tests
//
//  Created by Vin Bui on 5/31/23.
//

// ===== DO NOT EDIT THIS FILE =====

import XCTest
@testable import A1

final class A1Tests: XCTestCase {

    final let app = MainApp()
    
    func testIntroduce() {
        var result: String
        
        // Test empty string
        result = app.introduce(name: "", age: 4)
        XCTAssertEqual(result, "Hi! My name is . I am 4 years old.")
        
        // Test non-empty string
        result = app.introduce(name: "Antoinette", age: 4)
        XCTAssertEqual(result, "Hi! My name is Antoinette. I am 4 years old.")
    }
    
    func testGetStudentInfo() {
        let result = app.getStudentInfo(name: "Vin Bui", netid: "vdb23", year: 2025)
        
        XCTAssertEqual(result, [
            "name": "Vin Bui",
            "netid": "vdb23",
            "year": "2025"
        ])
    }
    
    func testCountEvens() {
        var result: Int
        
        // Test empty array
        result = app.countEvens([])
        XCTAssertEqual(result, 0)
        
        // Test array with one even number
        result = app.countEvens([2])
        XCTAssertEqual(result, 1)
        
        // Test array with more than one even number
        result = app.countEvens([2,2])
        XCTAssertEqual(result, 2)
        
        // Test array with multiple even and odd numbers
        result = app.countEvens([1,2,3,4,5,6,6])
        XCTAssertEqual(result, 4)
    }
    
    func testCapitalizeStrings() {
        var result: [String]
        
        // Test empty array
        result = app.capitalizeStrings([])
        XCTAssertEqual(result, [])
        
        // Test array containing empty string
        result = app.capitalizeStrings([""])
        XCTAssertEqual(result, [""])
        
        // Test array containing only lowercased
        result = app.capitalizeStrings(["vin", "richie"])
        XCTAssertEqual(result, ["VIN", "RICHIE"])
        
        // Test array containing mixed lowercased and uppercased
        result = app.capitalizeStrings(["vin", "RiChiE", "Jennifer"])
        XCTAssertEqual(result, ["VIN", "RICHIE", "JENNIFER"])
    }
    
    func testRepeatString() {
        var result: [String]
        
        // Test 0 count
        result = app.repeatString(str: "Richie", count: 0)
        XCTAssertEqual(result, [])
        
        // Test negative count
        result = app.repeatString(str: "Richie", count: -5)
        XCTAssertEqual(result, [])
        
        // Test str empty string
        result = app.repeatString(str: "", count: 3)
        XCTAssertEqual(result, ["", "", ""])
        
        // Test non empty string with count > 0
        result = app.repeatString(str: "Richie", count: 3)
        XCTAssertEqual(result, ["Richie", "Richie", "Richie"])
    }
    
    func testCountWords() {
        var result: Int?
        
        // Test empty string
        result = app.countWords("")
        XCTAssertEqual(result, nil)
        
        // Test one word
        result = app.countWords("AppDev")
        XCTAssertEqual(result, 1)
        
        // Test multiple non-adjacent spaces
        result = app.countWords("Cornell AppDev is cool!")
        XCTAssertEqual(result, 4)
        
        // Test multiple adjacent spaces
        result = app.countWords("Cornell   AppDev")
        XCTAssertEqual(result, 2)
        
        // Test space at the end
        result = app.countWords("Richie ")
        XCTAssertEqual(result, 1)
        
        // Test space at the begining
        result = app.countWords(" Richie")
        XCTAssertEqual(result, 1)
    }
    
    func testContainsNum() {
        var result: Bool
        
        // Test nil
        result = app.containsNum(nil)
        XCTAssertFalse(result)
        
        // Test contains only a number
        let nums: [String] = ["0","1","2","3","4","5","6","7","8","9"]
        nums.forEach {
            XCTAssertTrue(app.containsNum($0))
        }
        
        // Test contain no numbers, not nil
        result = app.containsNum("AppDev")
        XCTAssertFalse(result)
        
        // Test contain numbers, not nil
        result = app.containsNum("C0rnell AppD3v")
        XCTAssertTrue(result)
    }
    
    func testUppercaseLead() {
        var result: String
        
        // Test ios
        result = app.uppercaseLead(subteam: "ios")
        XCTAssertEqual(result, "TIFFANY PAN")
        
        // Test design
        result = app.uppercaseLead(subteam: "design")
        XCTAssertEqual(result, "CHRISTINA ZENG")
        
        // Test marketing
        result = app.uppercaseLead(subteam: "marketing")
        XCTAssertEqual(result, "EDDIE CHI")
        
        // Test backend
        result = app.uppercaseLead(subteam: "backend")
        XCTAssertEqual(result, "JOYCE WU")
        
        // Test android
        result = app.uppercaseLead(subteam: "android")
        XCTAssertEqual(result, "EMILY HU")
        
        // Test invalid
        result = app.uppercaseLead(subteam: "gamedev")
        XCTAssertEqual(result, "Invalid")
    }
    
    func testFilterImposter() {
        var result: [String]
        
        // Test empty array
        result = app.filterImposter(in: [])
        XCTAssertEqual(result, [])
        
        // Test empty string
        result = app.filterImposter(in: [""])
        XCTAssertEqual(result, [""])
        
        // Test no vowels
        result = app.filterImposter(in: ["hhhhh", "jjjjj"])
        XCTAssertEqual(result, ["hhhhh", "jjjjj"])
        
        // Test only vowels
        result = app.filterImposter(in: ["Cornell", "AppDev"])
        XCTAssertEqual(result, [])
        
        // Test mixed vowels and no vowels
        result = app.filterImposter(in: ["Cornell", "AppDev", "bbbbb"])
        XCTAssertEqual(result, ["bbbbb"])
        
        // Test y (should not be a vowel)
        result = app.filterImposter(in: ["y"])
        XCTAssertEqual(result, ["y"])
    }

}
